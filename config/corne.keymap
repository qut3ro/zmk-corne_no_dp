/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap_letters";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        sm: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_MOD";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            quick-release;
            ignore-modifiers;
        };

        backspace_morph: backspace_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_MORPH";
            bindings = <&lt 2 BACKSPACE>, <&lt 2 LA(BACKSPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <15 16 14>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <19 20 21>;
        };

        comboL4 {
            bindings = <&mo 4>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        letters {
            display-name = "Let";
            bindings = <
&kp ESC           &kp Q  &kp W  &kp E     &kp R        &kp T             &kp Y        &kp U             &kp I      &kp O    &kp P          &kp DELETE
&kp TAB           &kp A  &kp S  &kp D     &kp F        &kp G             &kp H        &kp J             &kp K      &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp V        &kp B             &kp N        &kp M             &kp COMMA  &kp DOT  &kp SLASH      &kp ENTER
                                &kp LGUI  &lt 1 ENTER  &kp LEFT_SHIFT    &lt 3 SPACE  &backspace_morph  &kp RALT
            >;
        };

        numbers {
            display-name = "Num";
            bindings = <
&kp LC(LA(U))                &kp LC(LA(I))     &kp LA(LC(LEFT_ARROW))  &kp LC(LA(RIGHT_ARROW))  &kp LC(LA(ENTER))  &kp LG(NUMBER_6)    &kp LG(SPACE)   &kp LEFT_PARENTHESIS  &kp EQUAL     &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp PAGE_UP
&kp LC(LA(LG(LEFT_ARROW)))   &kp NUMBER_1      &kp NUMBER_2            &kp NUMBER_3             &kp NUMBER_4       &kp NUMBER_5        &kp NUMBER_6    &kp N7                &kp NUMBER_8  &kp NUMBER_9           &kp NUMBER_0    &kp PAGE_DOWN
&kp LG(LC(LA(RIGHT_ARROW)))  &kp LEFT_BRACKET  &kp RIGHT_BRACKET       &kp MINUS                &kp PLUS           &kp ASTERISK        &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp COMMA     &kp PERIOD             &none           &kp END
                                                                       &trans                   &trans             &trans              &trans          &trans                &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp GRAVE      &kp RIGHT_BRACE    &ht GREATER_THAN LESS_THAN  &kp LEFT_BRACE     &kp LG(NUMBER_6)    &kp BACKSLASH  &kp LEFT_PARENTHESIS  &ht PLUS EQUAL  &kp RIGHT_PARENTHESIS  &kp UNDER         &trans
&trans  &kp AMPERSAND  &kp EXCLAMATION    &kp SEMICOLON               &kp DOUBLE_QUOTES  &kp SQT             &kp AT_SIGN    &kp LEFT_COMMAND      &kp LEFT_ALT    &kp LEFT_SHIFT         &kp LEFT_CONTROL  &trans
&trans  &kp PERCENT    &kp RIGHT_BRACKET  &kp COLON                   &kp LEFT_BRACKET   &kp HASH            &kp CARET      &kp MINUS             &kp COMMA       &kp PERIOD             &kp QUESTION      &trans
                                          &trans                      &trans             &trans              &trans         &trans                &trans
            >;
        };

        functions {
            display-name = "Fun";
            bindings = <
&ht F1 C_BRI_DN  &ht F2 C_BRI_UP  &kp F3     &kp F4     &kp F5     &kp F6    &ht F7 C_PREV       &ht F8 C_PLAY_PAUSE  &ht F9 C_NEXT   &ht F10 C_MUTE   &ht F11 C_VOL_DN  &ht F12 C_VOL_UP
&none            &kp LG(Z)        &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans    &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp UP_ARROW    &none            &none             &none
&bootloader      &none            &none      &none      &trans     &trans    &none               &kp LEFT_ARROW       &kp DOWN_ARROW  &kp RIGHT_ARROW  &none             &bootloader
                                             &trans     &trans     &trans    &trans              &trans               &trans
            >;
        };

        bt_light {
            bindings = <
&trans  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_DISC 0  &trans  &trans    &trans  &none           &none            &none            &none                           &trans
&trans  &trans          &trans        &trans         &trans  &trans    &trans  &rgb_ug RGB_ON  &rgb_ug RGB_OFF  &rgb_ug RGB_EFF  &rgb_ug RGB_COLOR_HSB(0,0,100)  &trans
&trans  &trans          &trans        &trans         &trans  &trans    &trans  &trans          &trans           &trans           &trans                          &trans
                                      &trans         &trans  &trans    &trans  &trans          &trans
            >;
        };
    };
};
