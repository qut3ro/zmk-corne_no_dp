#include <behaviors/ruen.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    charmap_us: charmap_us {
        compatible = "zmk,charmap";
        label = "US Charmap";
    };

    behaviors {
        ht: hold_tap {
            label = "hold_tap_letters";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        sm: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_MOD";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            quick-release;
            ignore-modifiers;
        };

        bspc_morph: bspc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_MORPH";
            bindings = <&lt 2 BACKSPACE>, <&lt 2 LA(BACKSPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        q_morph: q_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_MORPH";
            bindings = <&ruen_key Q W>, <&kp LG(Q)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        a_morph: a_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "A_MORPH";
            bindings = <&ruen_key A B>, <&kp LG(A)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        z_morph: z_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "Z_MORPH";
            bindings = <&ruen_key Z A>, <&kp LG(Z)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        w_morph: w_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "W_MORPH";
            bindings = <&ruen_key W M>, <&kp LG(W)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        s_morph: s_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "S_MORPH";
            bindings = <&ruen_key S T>, <&kp LG(S)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        x_morph: x_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "X_MORPH";
            bindings = <&ruen_key X SQT>, <&kp LG(X)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        c_morph: c_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "C_MORPH";
            bindings = <&ruen_key C LEFT_BRACKET>, <&kp LG(C)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        r_morph: r_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "R_MORPH";
            bindings = <&ruen_key R Q>, <&kp LG(R)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        f_morph: f_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "F_MORPH";
            bindings = <&ruen_key F F>, <&kp LG(F)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        v_morph: v_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "V_MORPH";
            bindings = <&ruen_key V S>, <&kp LG(V)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        b_morph: b_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "B_MORPH";
            bindings = <&ruen_key B PERIOD>, <&kp LG(B)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
            layers = <0 4>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
            layers = <0 4>;
        };

        tg4 {
            bindings = <&tog 4>;
            key-positions = <31 32>;
            layers = <0>;
        };

        cmd {
            bindings = <&kp LEFT_GUI>;
            key-positions = <30 31>;
            layers = <0 1>;
        };

        DPtoIE {
            bindings = <&ruen_key F24 O>;
            key-positions = <12 13>;
            layers = <0>;
        };

        OAtoSHCH {
            bindings = <&ruen_key F24 RBKT>;
            key-positions = <2 3>;
            layers = <0>;
        };
    };

    macros {
        ruen_to_en: ruen_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N8)>;
        };

        ruen_to_ru: ruen_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(N9)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Let {
            bindings = <
&q_morph  &w_morph  &ruen_key E Z  &r_morph      &ruen_key T I  &ruen_key Y P      &ruen_key U D       &ruen_key I R      &ruen_key O L  &ruen_key LS(MINUS) SEMICOLON
&a_morph  &s_morph  &ruen_key D J  &f_morph      &ruen_key G E  &ruen_key H K      &ruen_key J Y       &ruen_key K N      &ruen_key L C  &ruen_key P H
&z_morph  &x_morph  &c_morph       &v_morph      &b_morph       &ruen_key N COMMA  &ruen_key PERIOD V  &ruen_key COMMA G  &ruen_key M U  &ruen_key LS(SLASH) X
                                   &lt 1 DELETE  &kp LSHIFT     &kp SPACE          &bspc_morph
            >;
        };

        Num {
            bindings = <
&none   &ruen_key LS(N5) LS(N4)  &kp SLASH  &ruen_one_key 1 LS(N8)  &kp ESCAPE      &kp LA(SPACE)  &kp LS(N9)               &kp EQUAL               &kp LS(N0)             &kp LS(MINUS)
&kp N1  &kp N2                   &kp N3     &kp N4                  &kp N5          &kp N6         &kp N7                   &kp N8                  &kp N9                 &kp N0
&none   &ruen_one_key 1 LS(N4)   &kp MINUS  &kp LS(EQUAL)           &ruen_switch 0  &none          &ruen_key PERIOD LS(N7)  &ruen_key COMMA LS(N6)  &ruen_one_key 0 LA(H)  &none
                                            &trans                  &kp LEFT_SHIFT  &kp SPACE      &lt 3 BACKSPACE
            >;
        };

        Sym {
            bindings = <
&none                   &ruen_one_key 1 LS(RIGHT_BRACKET)  &ruen_one_key 1 LS(N3)          &ruen_one_key 1 LS(LEFT_BRACKET)  &ruen_one_key 1 BACKSLASH  &ruen_one_key 1 GRAVE   &ruen_one_key 1 LS(COMMA)  &ruen_one_key 1 LS(BACKSLASH)  &ruen_one_key 1 LS(PERIOD)  &kp LS(MINUS)
&ruen_one_key 1 LS(N7)  &kp LS(N1)                         &ruen_key LS(SEMICOLON) LS(N5)  &ruen_key LS(SQT) LS(N2)          &ruen_one_key 1 SQT        &ruen_one_key 1 LS(N2)  &sm LEFT_GUI               &sm LEFT_ALT                   &sm LEFT_SHIFT              &sm LCTRL
&none                   &ruen_key RIGHT_BRACKET GRAVE      &ruen_key SEMICOLON LS(N8)      &ruen_key LEFT_BRACKET LS(GRAVE)  &ruen_one_key 1 LS(GRAVE)  &ruen_switch 1          &ruen_key PERIOD LS(N7)    &ruen_key COMMA LS(N6)         &ruen_one_key 1 LS(N6)      &kp LS(SLASH)
                                                                                           &lt 3 DELETE                      &kp LEFT_SHIFT             &kp SPACE               &trans
            >;
        };

        Fun {
            bindings = <
&bootloader   &bt BT_CLR    &none       &bt BT_SEL 1  &ruen_macos 1   &ruen_macos 0  &bt BT_SEL 0  &none       &bt BT_CLR    &bootloader
&kp F1        &kp F2        &kp F3      &kp F4        &kp F5          &kp F6         &kp F7        &kp F8      &kp F9        &kp F10
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT    &kp F11         &kp F12        &kp C_PP      &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP
                                        &trans        &kp LEFT_SHIFT  &kp SPACE      &trans
            >;
        };

        Nav {
            bindings = <
&none          &none              &kp LG(GRAVE)                   &kp LG(TAB)              &kp PAGE_UP              &ht LG(RIGHT_BRACKET) LG(LEFT_BRACKET)  &kp LC(RIGHT_BRACKET)  &kp UP         &none                                      &none
&kp LG(Z)      &kp LG(X)          &kp LG(C)                       &kp LG(V)                &kp PAGE_DOWN            &kp LC(TAB)                             &kp LEFT               &kp DOWN       &kp RIGHT                                  &none
&kp LC(LG(F))  &kp LC(LA(ENTER))  &ht LA(LC(RIGHT)) LC(LA(LEFT))  &ht LC(LA(J)) LC(LA(U))  &ht LC(LA(K)) LC(LA(I))  &none                                   &kp LC(LEFT)           &kp LC(RIGHT)  &ht LG(LA(NUMBER_3)) LG(LA(LC(NUMBER_3)))  &ht LG(LA(NUMBER_4)) LG(LA(LC(NUMBER_4)))
                                                                  &tog 4                   &kp LEFT_SHIFT           &kp LEFT_GUI                            &kp LEFT_ALT
            >;
        };
    };
};
